{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Display","props","className","value","ClearButt","onClick","theHandler","Operators","Digits","Calculator","state","sum","operatorHandler","param","console","log","sumArr","result","eval","join","setState","push","digitHandler","pop","display","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9cf3226.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n// there are no specific external components created for this app\n\n\n\n\n// There are 3 button components \n// If refactoring the code, one could use a single handler\n// This would mean tat a map function could be used with an array of button\n// values to create the button components dynamically\n// This also would be DRY'r and less code size\n\nconst Display = (props)=>{\n  return(\n    <div className=\"displayWrapper\">\n      <h1 className=\"display\">{props.value}</h1>\n    </div>\n  )\n}\n\n\nconst ClearButt = (props) => {\n  return(\n    <div className=\"clearButtWrapp\">\n      <button className=\"clearButt\" onClick = {() => props.theHandler('Clear')}>Clear</button>\n    </div>\n  )\n}\n\n\nconst Operators = (props)=> {\n  return(\n    <div className=\"operatorWrapp\">\n      <div className=\"operator but\" onClick = {() => props.theHandler('+')}>+</div>\n      <div className=\"operator but\" onClick = {() => props.theHandler('/')}>/</div>\n      <div className=\"operator but\" onClick = {() => props.theHandler(\"*\")}>*</div>\n      <div className=\"operator but\" onClick = {() => props.theHandler(\"-\")}>-</div>\n      <div className=\"operator but\" onClick = {() => props.theHandler(\"=\")}>=</div>\n    </div>\n    )\n}\n\n\nconst Digits = (props) => {\n  return(\n    <div className=\"digitWrapp\">\n      <div className=\"digits but\" onClick = {() => props.theHandler('0')}>0</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('1')}>1</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('2')}>2</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('3')}>3</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('4')}>4</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('5')}>5</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('6')}>6</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('7')}>7</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('8')}>8</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('9')}>9</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('.')}>.</div>\n      <div className=\"digits but\" onClick = {() => props.theHandler('d')}>&laquo;</div>\n    </div>\n  )\n}\n\n\n\nclass Calculator extends React.Component {\n\n\n  state = {\n    sum:[],     // an array to contain the ongoing calculation \n    value: 0    // a value to be displayed\n  }\n\n  // There are two handlers shown here.\n  // All buttons could share the same handler with a longer \n  // if-else desision sequence \n\n  operatorHandler = (param) => {\n    console.log(` oeratorHandler -->  ${param}`)\n    let sumArr = this.state.sum\n    if(param === '='){\n      console.log('calculate')\n      let result = eval(sumArr.join(\"\"))\n      this.setState({value: result})\n      this.setState({sum: []})\n      console.log(`sumArr --> ${sumArr}`)\n    }\n    else if(param === \"Clear\"){\n      this.setState({value: 0})\n      this.setState({sum: []})\n      console.log(`sumArr --> ${sumArr}`)\n    } \n    else {\n      console.log(`operator  -->  ${param}`)\n      sumArr.push(param)\n      this.setState({sum: sumArr})\n      this.setState({value: (sumArr.join(\"\"))})\n      console.log(`sumArr --> ${sumArr}`)\n  }\n  }\n\n\n\n  digitHandler = (param) => {\n    console.log(`digitHandler --> ${param}`)\n    if(param === 'd'){\n      let sumArr = this.state.sum\n      sumArr.pop()\n      let display = sumArr.join(\"\")\n      this.setState({value: display})\n      this.setState({sum: sumArr})\n      console.log(`sumArr --> ${sumArr}`)\n    }\n    else {\n    let sumArr = this.state.sum\n    sumArr.push(param)\n    this.setState({sum: sumArr})\n    this.setState({value: (sumArr.join(\"\"))})\n    console.log(`sumArr --> ${sumArr}`)\n    }\n\n  }\n\n// During initial design the calculator was split into 4 components\n// This was loosly bsed on functionality and CSS.\n// With hindsight the CSS should have been less of a concern as all \n// buttons could have been included in one overall wrapper and then \n// style seperated according to a className object refernece or similar\n  render(){\n    return(\n      <div className=\"calculator\">\n        <Display value={this.state.value}/>\n        <ClearButt theHandler={this.operatorHandler}/>\n        <Operators theHandler={this.operatorHandler}/>\n        <Digits theHandler={this.digitHandler}/>\n      </div>\n    )\n  }\n}\n\n\n\n// Top level just contain the Calculator app itself\nclass App extends React.Component {\n  render(){\n    return(\n      <div className=\"App\">\n        <Calculator/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}