{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Display","className","ClearButt","Operators","props","onClick","theHandler","Digits","Calculator","state","sum","clearKey","value","operatorHandler","param","console","log","sumArr","push","setState","digitHandler","clearKeyHandler","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAMMA,G,MAAU,WACd,OACE,yBAAKC,UAAU,kBACb,wBAAIA,UAAU,WAAd,YAMAC,EAAY,WAChB,OACE,yBAAKD,UAAU,kBACb,4BAAQA,UAAU,aAAlB,WAQAE,EAAY,SAACC,GAIf,OACE,yBAAKH,UAAU,iBACb,yBAAKA,UAAU,gBACb,4BAAQA,UAAU,eAAeI,QAAW,kBAAMD,EAAME,WAAW,OAAnE,MAGF,yBAAKL,UAAU,gBACb,4BAAQA,UAAU,eAAeI,QAAW,kBAAMD,EAAME,WAAW,OAAnE,MAGF,yBAAKL,UAAU,gBACb,4BAAQA,UAAU,eAAeI,QAAW,kBAAMD,EAAME,WAAW,OAAnE,MAGF,yBAAKL,UAAU,gBACb,4BAAQA,UAAU,eAAeI,QAAW,kBAAMD,EAAME,WAAW,OAAnE,MAGF,yBAAKL,UAAU,gBACb,4BAAQA,UAAU,eAAeI,QAAW,kBAAMD,EAAME,WAAW,OAAnE,QAQJC,EAAS,SAACH,GAId,OACE,yBAAKH,UAAU,cAEb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAf,MAGF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAf,MAGF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAf,MAGF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAf,MAGF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAf,MAGF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAf,MAGF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAf,MAGF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAf,MAGF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAf,MAGF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gBAAf,QASFO,E,2MACJC,MAAQ,CACNC,IAAI,GACJC,UAAU,EACVC,MAAO,G,EAGTC,gBAAkB,SAACC,GACjBC,QAAQC,IAAIF,GACZ,IAAIG,EAAS,EAAKR,MAAMC,IACX,MAAVI,IACDG,EAAOC,KAAKJ,GACZ,EAAKK,SAAS,CAACT,IAAKO,M,EAKxBG,aAAe,WACbL,QAAQC,IAAI,kB,EAGdK,gBAAkB,WAChBN,QAAQC,IAAI,sB,wEAIZ,OACE,yBAAKf,UAAU,cACb,kBAAC,EAAD,CAASW,MAAOU,KAAKb,MAAMG,QAC3B,kBAAC,EAAD,CAAWD,SAAUW,KAAKb,MAAME,SAAUL,WAAYgB,KAAKD,kBAC3D,kBAAC,EAAD,CAAWX,IAAKY,KAAKb,MAAMC,IAAKJ,WAAYgB,KAAKT,kBACjD,kBAAC,EAAD,CAAQH,IAAKY,KAAKb,MAAMC,IAAKJ,WAAYgB,KAAKF,oB,GA/B7BG,IAAMC,WAkDhBC,E,iLARX,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,W,GAJUsB,IAAMC,WC1IJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.42c930f9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\n\nconst Display = ()=>{\n  return(\n    <div className=\"displayWrapper\">\n      <h1 className=\"display\">12345</h1>\n    </div>\n  )\n}\n\n\nconst ClearButt = () => {\n  return(\n    <div className=\"clearButtWrapp\">\n      <button className=\"clearButt\">Clear</button>\n    </div>\n  )\n}\n\n\n\n\nconst Operators = (props)=> {\n\n\n\n    return(\n      <div className=\"operatorWrapp\">\n        <div className=\"operator but\">\n          <button className=\"centButValue\" onClick = {() => props.theHandler('+')}>+</button>\n        </div>\n\n        <div className=\"operator but\">\n          <button className=\"centButValue\" onClick = {() => props.theHandler('/')}>/</button>\n        </div>\n\n        <div className=\"operator but\">\n          <button className=\"centButValue\" onClick = {() => props.theHandler(\"*\")}>*</button>\n        </div>\n\n        <div className=\"operator but\">\n          <button className=\"centButValue\" onClick = {() => props.theHandler(\"-\")}>-</button>\n        </div>\n\n        <div className=\"operator but\">\n          <button className=\"centButValue\" onClick = {() => props.theHandler(\"=\")}>=</button>\n        </div>\n      </div>\n  )\n  \n}\n\n\nconst Digits = (props) => {\n\n\n\n  return(\n    <div className=\"digitWrapp\">\n\n      <div className=\"digits but\">\n        <div className=\"centButValue\">0</div>\n      </div>\n\n      <div className=\"digits but\">\n        <div className=\"centButValue\">1</div>\n      </div>\n\n      <div className=\"digits but\">\n        <div className=\"centButValue\">2</div>\n      </div>\n\n      <div className=\"digits but\">\n        <div className=\"centButValue\">3</div>\n      </div>\n\n      <div className=\"digits but\">\n        <div className=\"centButValue\">4</div>\n      </div>\n\n      <div className=\"digits but\">\n        <div className=\"centButValue\">5</div>\n      </div>\n\n      <div className=\"digits but\">\n        <div className=\"centButValue\">6</div>\n      </div>\n\n      <div className=\"digits but\">\n        <div className=\"centButValue\">7</div>\n      </div>\n\n      <div className=\"digits but\">\n        <div className=\"centButValue\">8</div>\n      </div>\n\n      <div className=\"digits but\">\n        <div className=\"centButValue\">9</div>\n      </div>\n\n    </div>\n  )\n}\n\n\n\nclass Calculator extends React.Component {\n  state = {\n    sum:[],\n    clearKey: false,\n    value: 0\n  }\n\n  operatorHandler = (param) => {\n    console.log(param)\n    let sumArr = this.state.sum\n    if(param !== '='){\n      sumArr.push(param)\n      this.setState({sum: sumArr})\n    }\n\n  }\n\n  digitHandler = () => {\n    console.log('digit Handler')\n  }\n\n  clearKeyHandler = () => {\n    console.log('clear key handler')\n  }\n\n  render(){\n    return(\n      <div className=\"calculator\">\n        <Display value={this.state.value}/>\n        <ClearButt clearKey={this.state.clearKey} theHandler={this.clearKeyHandler}/>\n        <Operators sum={this.state.sum} theHandler={this.operatorHandler}/>\n        <Digits sum={this.state.sum} theHandler={this.digitHandler}/>\n      </div>\n    )\n  }\n}\n\n\n\n\nclass App extends React.Component {\n  render(){\n    return(\n      <div className=\"App\">\n        <Calculator/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}